set.seed(5600)
microbio.rare = Rarefy(otu_data)$otu.tab.rff
otu_data[1,1]
otu_data[1,2]
microbio.rare = Rarefy(otu_data[,-c(2)])$otu.tab.rff
cosa = otu_data[,-c(2)]
View(cosa)
cosa = otu_data[-c(2),]
View(cosa)
cosa = otu_data[,-1]
View(cosa)
microbio.rare = Rarefy(cosa)$otu.tab.rff
View(microbio.rare)
sum(is.na(otu_data))
View(otu_data)
packages.install("pcalg")
install.packages("pcalg")
?rarefaction
?pcalg
library(pcalg)
install.packages("graph")
install.packages("graph")
library(pcalg)
install.packages("pcalg")
library(pcalg)
install.packages("graph")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("graph")
library(pcalg)
install.packages("RBGL")
BiocManager::install("RBGL")
library(pcalg)
?pcagls
?pcagl
-------------------------
### Initial commands ----
-------------------------
# Clean the workspace
#rm(list=ls())
# Set the seed to replicate analyses with random sampling
set.seed(12345)
# General function to copy-paste R tables into Excel
write.excel <- function(x,row.names=TRUE,col.names=TRUE,...) {
write.table(x,"clipboard",sep="\t",row.names=row.names,col.names=col.names,...)
}
# Color-blind-friendly palette
cbPalette = c("#E69F00","#56B4E9","#009E73","#F0E442","#0072B2","#D55E00","#CC79A7","#88CCEE","#CC6677","#DDCC77","#AA4499","#332288")
# Libraries
library(phytools)
library(GUniFrac)
library(data.table)
library(table1)
library(car)
library(reshape2)
library(NMF)
library(stringr)
library(randomForest)
# Create df_1 with specific row names
df_1 <- data.frame(x1 = c("A", "B", "C"), x2 = c(10, 20, 30))
rownames(df_1) <- c("r1", "r2", "r3")
# Create df_2 with matching and shuffled row names
df_2 <- data.frame(y1 = c("B", "C", "A", "D"), y2 = c(200, 300, 100, 400))
rownames(df_2) <- c("r2", "r3", "r1", "r4")  # Note: Order is different!
# Subset using %in% (order follows df_2)
Z1 <- df_2[rownames(df_2) %in% rownames(df_1), ]
print(Z1)  # Should retain the order from df_2: r2, r3, r1
#Packages
library(pcalg)
library(micd) #For mixed data tests
library(Rgraphviz) #Graph visualization
library(readr)
library(factoextra)
library(tibble)
library(dplyr)
#Directory
setwd("/Users/juanse/Documents/Tesis/IIND/HD_Microbiota_CI")
#Data Reading
{
#Anthropometric
anthro_data = read_delim("./Data/Consolidated/anthro_data.meta",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
#OTU observations
otu_data = read_delim("./Data/Consolidated/otu_data.otus",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
#Nutrient data
nutrients_data = read_delim("./Data/Consolidated/nutrients_data.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
unwanted_columns_nut = c("Codalt")
nutrients_data = nutrients_data[, !names(nutrients_data) %in% unwanted_columns_nut]
#Food group data
foodGroups_data = read.csv("./Data/Consolidated/food_groups_u24h.csv")
#Remove certain columns
unwanted_columns_fg = c("Code", "Codalt", "City", "r24h")
foodGroups_data = foodGroups_data[, !names(foodGroups_data) %in% unwanted_columns_fg]
}
#PCA preparation
{
#PCA Nutrients
nutrients_components = prcomp(nutrients_data[,-1], scale. = TRUE)
fviz_eig(nutrients_components)
#nutrient_values = nutrients_components$rotation
pca_nutrients <- as.data.frame(nutrients_components$x)
nutrients_pca_data = data.frame(ID = nutrients_data$ID,
PC_nutri_1 = pca_nutrients$PC1,
PC_nutri_2 =pca_nutrients$PC2,
PC_nutri_3 =pca_nutrients$PC3)
#PCA Food groups (sin HEI y SCORE GABAS)
fg_components = prcomp(foodGroups_data[,2:12], scale. = TRUE)
fviz_eig(fg_components)
#fg_rotations = fg_components$rotation
pca_fg = as.data.frame(fg_components$x)
fg_pca_data = data.frame(ID = foodGroups_data$ID,
PC_fg_1 = pca_fg$PC1,
PC_fg_2 = pca_fg$PC2,
PC_fg_3 = pca_fg$PC3)
}
#Normalization of non-gaussian-looking confounders
{
}
#Creation of dummy variables
{
sex_yes = ifelse(anthro_data$sex=="Male", 1, 0)
city_BGA = ifelse(anthro_data$city=="Bucaramanga", 1, 0)
city_MED = ifelse(anthro_data$city=="Medellin", 1, 0)
city_BAR = ifelse(anthro_data$city=="Barranquilla", 1, 0)
city_CLI = ifelse(anthro_data$city=="Cali", 1, 0)
}
#Creation of confounding variables matrix (not food or nutrients)
{
anthro_confounders <- data.frame(
ID = anthro_data$ID,
sex_yes = sex_yes,
city_BAR = city_BAR,
city_MED = city_MED,
city_BGA = city_BGA,
city_CLI = city_CLI,
age = anthro_data$age,
bmi = anthro_data$bmi,
body_fat = anthro_data$body_fat,
systolic_bp = anthro_data$systolic_bp,
diastolic_bp = anthro_data$diastolic_bp,
triglycerides = anthro_data$triglycerides,
HDL = anthro_data$HDL,
glucose = anthro_data$glucose,
HOMA_IR = anthro_data$HOMA_IR,
hsCRP = anthro_data$hsCRP
)
food_related_confounders = inner_join(nutrients_pca_data, fg_pca_data, by = "ID")
}
#OTU observation count
total_otu_observation_counts = colSums(otu_data[,-1])
#OTUs with no observations
zero_observation_otus = which(total_otu_observation_counts < 4)
length(zero_observation_otus) #There are 18 OTUs with no observations -> we dont need to use them
#OTUs with no observations
zero_observation_otus = which(total_otu_observation_counts < 2)
length(zero_observation_otus) #There are 18 OTUs with no observations -> we dont need to use them
zero_observation_otus
#Add 1 for column indices (to account for ID)
zero_observation_otus = zero_observation_otus + 1
#Select only OTUs with observations
observed_otus= otu_data[,-zero_observation_otus]
#Sanity check
observed_OTU_test = colSums(observed_otus[,-1])
length(which(observed_OTU_test == 0) == 0) == 0
#Relative abundance
otu_no_ids = observed_otus[,-1]
observed_otus[,1], otu_no_ids / rowSums(otu_no_ids)
otu_no_ids / rowSums(otu_no_ids)
abundances = otu_no_ids / rowSums(otu_no_ids)
View(abundances)
abundances = otu_no_ids / rowSums(otu_no_ids) * 100
View(abundances)
otu_relative_abundances = cbind(observed_otus[,1], abundances)
cm_1 = inner_join(anthro_confounders, food_related_confounders, by ="ID")
cm_1 = inner_join(cm_1, otu_relative_abundances, by = "ID")
#We remove MI_354_H because it has a NA in systolic_bp
cm_1 <- cm_1[!(cm_1$ID %in% c("MI_354_H")),]
cm_1 = as.data.frame(cm_1[,-1])
mc1.fit <- pc(suffStat = cm_1, indepTest = mixCItest, alpha = 0.01,
labels = colnames(cm_1), numCores = 3)
cm_1 = as.data.frame(cm_1[,c(3,4)])
mc1.fit <- pc(suffStat = cm_1, indepTest = mixCItest, alpha = 0.01,
labels = colnames(cm_1), numCores = 3)
View(mc1.fit)
cm_1 = as.data.frame(cm_1[,c(3,4,5,6,7,8,9,10,11)])
mc1.fit <- pc(suffStat = cm_1, indepTest = mixCItest, alpha = 0.01,
labels = colnames(cm_1), numCores = 3)
cm_1 = as.data.frame(cm_1[,c(1:100)])
cm_1 = as.data.frame(cm_1[,c(2:100)])
c(2:100)
cm_1 = as.data.frame(cm_1[,c(c(2:100)])
cm_1 = as.data.frame(cm_1[,c(c(2:100))])
?pc()
cm_1 = as.data.frame(cm_1[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26)])
cm_1 = inner_join(anthro_confounders, food_related_confounders, by ="ID")
cm_1 = inner_join(cm_1, otu_relative_abundances, by = "ID")
#We remove MI_354_H because it has a NA in systolic_bp
cm_1 <- cm_1[!(cm_1$ID %in% c("MI_354_H")),]
cm_1 = as.data.frame(cm_1[,c(2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26)])
mc1.fit <- pc(suffStat = cm_1, indepTest = mixCItest, alpha = 0.01,
labels = colnames(cm_1), numCores = 3)
cm_1 = inner_join(anthro_confounders, food_related_confounders, by ="ID")
cm_1 = inner_join(cm_1, otu_relative_abundances, by = "ID")
#We remove MI_354_H because it has a NA in systolic_bp
cm_1 <- cm_1[!(cm_1$ID %in% c("MI_354_H")),]
cm_1 = as.data.frame(cm_1[,c(2:200)])
mc1.fit <- pc(suffStat = cm_1, indepTest = mixCItest, alpha = 0.01,
labels = colnames(cm_1), numCores = 3)
cm_1 = as.data.frame(cm_1[,c(4:200)])
cm_1 = inner_join(anthro_confounders, food_related_confounders, by ="ID")
cm_1 = inner_join(cm_1, otu_relative_abundances, by = "ID")
#We remove MI_354_H because it has a NA in systolic_bp
cm_1 <- cm_1[!(cm_1$ID %in% c("MI_354_H")),]
cm_1 = as.data.frame(cm_1[,c(4:200)])
mc1.fit <- pc(suffStat = cm_1, indepTest = mixCItest, alpha = 0.01,
labels = colnames(cm_1), skel.method = "stable.fast", numCores = 3)
cm_1 = inner_join(anthro_confounders, food_related_confounders, by ="ID")
cm_1 = inner_join(cm_1, otu_relative_abundances, by = "ID")
#We remove MI_354_H because it has a NA in systolic_bp
cm_1 <- cm_1[!(cm_1$ID %in% c("MI_354_H")),]
cm_1 = as.data.frame(cm_1[,c(2:400)])
mc1.fit <- pc(suffStat = cm_1, indepTest = mixCItest, alpha = 0.01,
labels = colnames(cm_1), skel.method = "stable.fast", numCores = 3)
cm_1 = inner_join(anthro_confounders, food_related_confounders, by ="ID")
cm_1 = inner_join(cm_1, otu_relative_abundances, by = "ID")
#We remove MI_354_H because it has a NA in systolic_bp
cm_1 <- cm_1[!(cm_1$ID %in% c("MI_354_H")),]
cm_1 = as.data.frame(cm_1[,c(2:600)])
mc1.fit <- pc(suffStat = cm_1, indepTest = mixCItest, alpha = 0.01,
labels = colnames(cm_1), skel.method = "stable.fast", numCores = 3)
View(cm_1)
cov(cm_1)
ida_test = ida(250, 7, cov(cm_1), method = "global")
ida_test = ida(250, 7, cov(cm_1), mc1.fit@graph, method = "local")
isValidGraph(mc1.fit@graph)
?isValidGraph
isValidGraph(mc1.fit@graph, type = "cpdag")
isValidGraph(mc1.fit@graph, type = "cpdag", verbose = TRUE)
isValidGraph(mc1.fit@graph, type = "cpdag", verbose = TRUE)
class(mc1.fit@graph)
checkGraph <- isValidGraph(mc1.fit@graph, type = "pdag", verbose = TRUE)
mc1.fit@graph
adjMatrix <- as(mc1.fit@graph, "matrix")
print(adjMatrix)  # Check for unexpected values
ida_test = ida(250, 7, cov(cm_1), mc1.fit@graph, method = "local")
pc.cpdag <- dag2cpdag(mc1.fit@graph)
isValidGraph(pc.cpdag, type = "cpdag", verbose = TRUE)
library(RBGL)
isDAG <- acyclic(pc.fit@graph)
library(dagitty)
package.install("dagitty")
BiocManager::install("dagitty")
# Convert graphNEL to dagitty format
pc.dag <- as(mc1.fit@graph, "dagitty")
library(dagitty)
# Convert graphNEL to dagitty format
pc.dag <- as(mc1.fit@graph, "dagitty")
adjMatrix <- as(mc1.fit@graph, "matrix")
# Find bidirected edges (both A->B and B->A exist)
bidirected_edges <- which((adjMatrix == 1) & (t(adjMatrix) == 1), arr.ind = TRUE)
bidirected_edges
data(gmI)
suffStat <- list(C = cor(gmI$x), n = nrow(gmI$x))
pc.fit <- pc(suffStat, indepTest=gaussCItest,
p = ncol(gmI$x), alpha = 0.01)
adjMatrix <- as(pc.fit@graph, "matrix")
# Find bidirected edges (both A->B and B->A exist)
bidirected_edges <- which((adjMatrix == 1) & (t(adjMatrix) == 1), arr.ind = TRUE)
bidirected_edges
isValidGraph(pc.fit@graph, type = "pdag", verbose = TRUE)
?isValidGraph
isValidGraph(adjMatrix, type = "pdag", verbose = TRUE)
isValidGraph(adjMatrix, type = "cpdag", verbose = TRUE)
ida(2, 5, cov(gmI$x), pc.fit@graph, method = "global", verbose = FALSE)
ida(2, 5, cov(gmI$x), pc.fit@graph, method = "local", verbose = FALSE)
isValidGraph(adjMatrix, type = "cpdag", verbose = TRUE)
plot(gmL$g, main = "True DAG")
plot(gmL$g, main = "True DAG")
plot(pc.fit, main = "Estimated DAG")
adjMatrix <- as(mc1.fit@graph, "matrix")
isValidGraph(adjMatrix, type = "cpdag", verbose = TRUE)
isValidGraph(adjMatrix, type = "pdag", verbose = TRUE)
library(igraph)
#Packages
library(pcalg)
library(micd) #For mixed data tests
library(Rgraphviz) #Graph visualization
library(readr)
library(factoextra)
library(tibble)
library(dplyr)
#Directory
setwd("/Users/juanse/Documents/Tesis/IIND/HD_Microbiota_CI")
#Data Reading
{
#Anthropometric
anthro_data = read_delim("./Data/Consolidated/anthro_data.meta",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
#OTU observations
otu_data = read_delim("./Data/Consolidated/otu_data.otus",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
#Nutrient data
nutrients_data = read_delim("./Data/Consolidated/nutrients_data.txt",
delim = "\t", escape_double = FALSE,
trim_ws = TRUE)
unwanted_columns_nut = c("Codalt")
nutrients_data = nutrients_data[, !names(nutrients_data) %in% unwanted_columns_nut]
#Food group data
foodGroups_data = read.csv("./Data/Consolidated/food_groups_u24h.csv")
#Remove certain columns
unwanted_columns_fg = c("Code", "Codalt", "City", "r24h")
foodGroups_data = foodGroups_data[, !names(foodGroups_data) %in% unwanted_columns_fg]
}
#PCA preparation
{
#PCA Nutrients
nutrients_components = prcomp(nutrients_data[,-1], scale. = TRUE)
fviz_eig(nutrients_components)
#nutrient_values = nutrients_components$rotation
pca_nutrients <- as.data.frame(nutrients_components$x)
nutrients_pca_data = data.frame(ID = nutrients_data$ID,
PC_nutri_1 = pca_nutrients$PC1,
PC_nutri_2 =pca_nutrients$PC2,
PC_nutri_3 =pca_nutrients$PC3)
#PCA Food groups (sin HEI y SCORE GABAS)
fg_components = prcomp(foodGroups_data[,2:12], scale. = TRUE)
fviz_eig(fg_components)
#fg_rotations = fg_components$rotation
pca_fg = as.data.frame(fg_components$x)
fg_pca_data = data.frame(ID = foodGroups_data$ID,
PC_fg_1 = pca_fg$PC1,
PC_fg_2 = pca_fg$PC2,
PC_fg_3 = pca_fg$PC3)
}
#Numeric confounder histograms -> for checking normality
{
hist(anthro_data$age) #Not normal-looking
hist(anthro_data$bmi) #Gaussian-like
hist(anthro_data$body_fat) #Gaussian-like
hist(anthro_data$systolic_bp) #Gaussian-like
hist(anthro_data$diastolic_bp) #Gaussian-like
hist(anthro_data$triglycerides) #Not normal-looking
hist(anthro_data$HDL) #Gaussian-like
hist(anthro_data$glucose) #Not normal looking
hist(anthro_data$HOMA_IR) #Highly affected by outliers
anthro_data_no_out = anthro_data[anthro_data$HOMA_IR < 10,]
hist(anthro_data_no_out$HOMA_IR) #Gaussian-like (not really)
hist(anthro_data$hsCRP) #Highly affected by outliers
antrho_data_no_hscrp_out = anthro_data[anthro_data$hsCRP < 4,]
hist(antrho_data_no_hscrp_out$hsCRP) #Not normal-looking
hist(nutrients_pca_data$PC_nutri_1) #Gaussian-like
hist(nutrients_pca_data$PC_nutri_2) #Gaussian-like
hist(nutrients_pca_data$PC_nutri_3) #Seems affected by outliers
nutrients_pca_data_no_out = nutrients_pca_data[nutrients_pca_data$PC_nutri_3<5, ]
hist(nutrients_pca_data_no_out$PC_nutri_3) #Gaussian-like
hist(fg_pca_data$PC_fg_1) #Gaussian-like (barely, not so much)
hist(fg_pca_data$PC_fg_2) #Seems affected by otuliers
fg_pca_no_out = fg_pca_data[fg_pca_data$PC_fg_2 > (0-5),]
hist(fg_pca_no_out$PC_fg_2) #Gaussian-like
hist(fg_pca_data$PC_fg_3) #Gaussiasn-like
}
#Creation of dummy variables
{
sex_yes = ifelse(anthro_data$sex=="Male", 1, 0)
city_BGA = ifelse(anthro_data$city=="Bucaramanga", 1, 0)
city_MED = ifelse(anthro_data$city=="Medellin", 1, 0)
city_BAR = ifelse(anthro_data$city=="Barranquilla", 1, 0)
city_CLI = ifelse(anthro_data$city=="Cali", 1, 0)
}
#Creation of confounding variables matrix (not food or nutrients)
{
anthro_confounders <- data.frame(
ID = anthro_data$ID,
sex_yes = sex_yes,
city_BAR = city_BAR,
city_MED = city_MED,
city_BGA = city_BGA,
city_CLI = city_CLI,
age = anthro_data$age,
bmi = anthro_data$bmi,
body_fat = anthro_data$body_fat,
systolic_bp = anthro_data$systolic_bp,
diastolic_bp = anthro_data$diastolic_bp,
triglycerides = anthro_data$triglycerides,
HDL = anthro_data$HDL,
glucose = anthro_data$glucose,
HOMA_IR = anthro_data$HOMA_IR,
hsCRP = anthro_data$hsCRP
)
food_related_confounders = inner_join(nutrients_pca_data, fg_pca_data, by = "ID")
}
#Identification of 0 observation OTUs
{
#OTU observation count
total_otu_observation_counts = colSums(otu_data[,-1])
#OTUs with no observations
zero_observation_otus = which(total_otu_observation_counts < 2)
length(zero_observation_otus) #There are 18 OTUs with no observations -> we dont need to use them
zero_observation_otus
#Add 1 for column indices (to account for ID)
zero_observation_otus = zero_observation_otus + 1
#Select only OTUs with observations
observed_otus= otu_data[,-zero_observation_otus]
#Sanity check
observed_OTU_test = colSums(observed_otus[,-1])
length(which(observed_OTU_test == 0) == 0) == 0
}
#Relative abundance
otu_no_ids = observed_otus[,-1]
abundances = otu_no_ids / rowSums(otu_no_ids) * 100
otu_relative_abundances = cbind(observed_otus[,1], abundances)
cm_1 = inner_join(anthro_confounders, food_related_confounders, by ="ID")
cm_1 = inner_join(cm_1, otu_relative_abundances, by = "ID")
#We remove MI_354_H because it has a NA in systolic_bp
cm_1 <- cm_1[!(cm_1$ID %in% c("MI_354_H")),]
cm_1 = as.data.frame(cm_1[,c(2:100)])
mc1.fit <- pc(suffStat = cm_1, indepTest = mixCItest, alpha = 0.01,
labels = colnames(cm_1), skel.method = "stable.fast", numCores = 3)
ida_test = ida(250, 7, cov(cm_1), mc1.fit@graph, method = "gl")
ida_test = ida(250, 7, cov(cm_1), mc1.fit@graph, method = "global")
ida_test = ida(100, 7, cov(cm_1), mc1.fit@graph, method = "global")
ida_test = ida(100, 7, cov(cm_1), mc1.fit@graph, method = "local")
ida_test = ida(99, 7, cov(cm_1), mc1.fit@graph, method = "local")
ida_test
data(gmI)
suffStat <- list(C = cor(gmI$x), n = nrow(gmI$x))
pc.fit <- pc(suffStat, indepTest=gaussCItest,
p = ncol(gmI$x), alpha = 0.01)
adjMatrix <- as(pc.fit@graph, "matrix")
# Find bidirected edges (both A->B and B->A exist)
bidirected_edges <- which((adjMatrix == 1) & (t(adjMatrix) == 1), arr.ind = TRUE)
ida(2, 5, cov(gmI$x), pc.fit@graph, method = "local", verbose = FALSE)
adj_matrix = as(mc1.fit@graph, "matrix")
data(gmI)
suffStat <- list(C = cor(gmI$x), n = nrow(gmI$x))
pc.fit <- pc(suffStat, indepTest=gaussCItest,
p = ncol(gmI$x), alpha = 0.01)
adjMatrix <- as(pc.fit@graph, "matrix")
adjMatrix
plot(pc.fit, main = "Estimated DAG")
pc.igraph <- igraph.from.graphNEL(pc.fit@graph)
pc.igraph <- graph_from_graphnel(pc.fit@graph)
has_cycles <- !is_dag(pc.igraph)
has_cycles
ida_test = ida(98, 7, cov(cm_1), mc1.fit@graph, method = "local")
ida_test
ida_test = ida(98, 7, cov(cm_1), mc1.fit@graph, method = "global")
mc_1 <- pc(suffStat = cm_1, indepTest = mixCItest,
alpha = 0.01,labels = colnames(cm_1),
u2pd="relaxed",skel.method = "stable.fast",
maj.rule = TRUE, solve.confl = TRUE,
numCores = 5)
ida_test = ida(98, 7, cov(cm_1), mc_1@graph, method = "local")
ida_test = ida(98, 7, cov(cm_1), mc_1@graph, method = "global")
ida_test = ida(50, 7, cov(cm_1), mc_1@graph, method = "local")
ida_test
cm_1 = as.data.frame(cm_1[,c(2:50)])
cm_1 = inner_join(anthro_confounders, food_related_confounders, by ="ID")
cm_1 = inner_join(cm_1, otu_relative_abundances, by = "ID")
#We remove MI_354_H because it has a NA in systolic_bp
cm_1 <- cm_1[!(cm_1$ID %in% c("MI_354_H")),]
cm_1 = as.data.frame(cm_1[,c(2:50)])
mc_1 <- pc(suffStat = cm_1, indepTest = mixCItest,
alpha = 0.01,labels = colnames(cm_1),
u2pd="relaxed",skel.method = "stable.fast",
maj.rule = TRUE, solve.confl = TRUE,
numCores = 5)
plot(mc_1)
plot(mc_1, main "Algo")
plot(mc_1, main ="Algo")
which(colnames(cm_1) == "HOMA_IR")
which(colnames(cm_1) == "Otu0007")
which(colnames(cm_1) == "Otu00007")
ida_test = ida(28, 14, cov(cm_1), mc_1@graph, method = "local")
ida_test
adj_matrix = as(mc1.fit@graph, "matrix")
isValidGraph(adj_matrix, type = "cpdag", vebose = TRUE)
isValidGraph(adj_matrix, type = "cpdag", verbose = TRUE)
isValidGraph(adj_matrix, type = "dag", verbose = TRUE)
cm_1 = inner_join(anthro_confounders, food_related_confounders, by ="ID")
cm_1 = inner_join(cm_1, otu_relative_abundances, by = "ID")
cm_1 = inner_join(anthro_confounders, food_related_confounders, by ="ID")
cm_1 = inner_join(cm_1, otu_relative_abundances, by = "ID")
#We remove MI_354_H because it has a NA in systolic_bp
cm_1 <- cm_1[!(cm_1$ID %in% c("MI_354_H")),]
cm_1 = cm_1[,c(2:50)]
cm_1 = as.data.frame(scale(cm_1))
View(cm_1)
mc_1 <- pc(suffStat = cm_1, indepTest = mixCItest,
alpha = 0.01,labels = colnames(cm_1),
u2pd="relaxed",skel.method = "stable.fast",
maj.rule = TRUE, solve.confl = TRUE,
numCores = 5)
ida_test = ida(28, 14, cov(cm_1), mc_1@graph, method = "local")
ida_test
adj_matrix = as(mc1.fit@graph, "matrix")
plot(mc_1, main = "Plot")
mc_1 <- pc(suffStat = cm_1, indepTest = mixCItest,
alpha = 0.01,labels = colnames(cm_1),
u2pd="relaxed",skel.method = "stable.fast",
maj.rule = TRUE, solve.confl = TRUE,
numCores = 5,
conservative = TRUE)
cm_1 = inner_join(anthro_confounders, food_related_confounders, by ="ID")
cm_1 = inner_join(cm_1, otu_relative_abundances, by = "ID")
